import * as _angular_core from '@angular/core';
import { BaseEditableHolder } from 'primeng/baseeditableholder';
import { Fluid } from 'primeng/fluid';

declare class BaseInput extends BaseEditableHolder {
    pcFluid: Fluid;
    /**
     * Spans 100% width of the container when enabled.
     * @defaultValue false
     * @group Props
     */
    fluid: _angular_core.InputSignalWithTransform<boolean, unknown>;
    /**
     * Specifies the input variant of the component.
     * @defaultValue 'outlined'
     * @group Props
     */
    variant: _angular_core.InputSignal<"filled" | "outlined">;
    /**
     * Specifies the size of the component.
     * @defaultValue undefined
     * @group Props
     */
    size: _angular_core.InputSignal<"large" | "small">;
    /**
     * Specifies the visible width of the input element in characters.
     * @defaultValue undefined
     * @group Props
     */
    inputSize: _angular_core.InputSignal<number>;
    /**
     * Specifies the value must match the pattern.
     * @defaultValue undefined
     * @group Props
     */
    pattern: _angular_core.InputSignal<string>;
    /**
     * The value must be greater than or equal to the value.
     * @defaultValue undefined
     * @group Props
     */
    min: _angular_core.InputSignal<number>;
    /**
     * The value must be less than or equal to the value.
     * @defaultValue undefined
     * @group Props
     */
    max: _angular_core.InputSignal<number>;
    /**
     * Unless the step is set to the any literal, the value must be min + an integral multiple of the step.
     * @defaultValue undefined
     * @group Props
     */
    step: _angular_core.InputSignal<number>;
    /**
     * The number of characters (code points) must not be less than the value of the attribute, if non-empty.
     * @defaultValue undefined
     * @group Props
     */
    minlength: _angular_core.InputSignal<number>;
    /**
     * The number of characters (code points) must not exceed the value of the attribute.
     * @defaultValue undefined
     * @group Props
     */
    maxlength: _angular_core.InputSignal<number>;
    $variant: _angular_core.Signal<"filled" | "outlined">;
    get hasFluid(): boolean;
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<BaseInput, never>;
    static ɵdir: _angular_core.ɵɵDirectiveDeclaration<BaseInput, never, never, { "fluid": { "alias": "fluid"; "required": false; "isSignal": true; }; "variant": { "alias": "variant"; "required": false; "isSignal": true; }; "size": { "alias": "size"; "required": false; "isSignal": true; }; "inputSize": { "alias": "inputSize"; "required": false; "isSignal": true; }; "pattern": { "alias": "pattern"; "required": false; "isSignal": true; }; "min": { "alias": "min"; "required": false; "isSignal": true; }; "max": { "alias": "max"; "required": false; "isSignal": true; }; "step": { "alias": "step"; "required": false; "isSignal": true; }; "minlength": { "alias": "minlength"; "required": false; "isSignal": true; }; "maxlength": { "alias": "maxlength"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}

export { BaseInput };
