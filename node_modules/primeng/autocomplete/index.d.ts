import * as _angular_core from '@angular/core';
import { TemplateRef, AfterViewChecked, AfterContentInit, OnDestroy, EventEmitter, ElementRef, NgZone, QueryList } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import * as i1 from 'primeng/api';
import { ScrollerOptions, OverlayService, OverlayOptions, PrimeTemplate } from 'primeng/api';
import { BaseInput } from 'primeng/baseinput';
import { ConnectedOverlayScrollHandler } from 'primeng/dom';
import { Overlay } from 'primeng/overlay';
import { Scroller } from 'primeng/scroller';
import { Nullable } from 'primeng/ts-helpers';
import { BaseStyle } from 'primeng/base';

/**
 * Custom complete event.
 * @see {@link AutoComplete.completeMethod}
 * @group Events
 */
interface AutoCompleteCompleteEvent {
    /**
     * Browser event.
     */
    originalEvent: Event;
    /**
     * Selected option value.
     */
    query: string;
}
/**
 * Custom click event.
 * @see {@link AutoComplete.onDropdownClick}
 * @group Events
 */
interface AutoCompleteDropdownClickEvent {
    /**
     * Browser event.
     */
    originalEvent: Event;
    /**
     * Selected option value.
     */
    query: string;
}
/**
 * Custom select event.
 * @see {@link AutoComplete.onSelect}
 * @group Events
 */
interface AutoCompleteSelectEvent {
    /**
     * Browser event.
     */
    originalEvent: Event;
    /**
     * Selected value.
     */
    value: any;
}
/**
 * Custom unselect event.
 * @see {@link AutoComplete.onUnSelect}
 * @group Events
 */
interface AutoCompleteUnselectEvent {
    /**
     * Browser event.
     */
    originalEvent: Event;
    /**
     * Removed value.
     */
    value: any;
}
/**
 * Custom lazy load event.
 * @see {@link AutoComplete.onLazyLoad}
 * @group Events
 */
interface AutoCompleteLazyLoadEvent {
    /**
     * First element in viewport.
     */
    first: any;
    /**
     * Last element in viewport.
     */
    last: any;
}
/**
 * Defines valid templates in AutoComplete.
 * @group Templates
 */
interface AutoCompleteTemplates {
    /**
     * Custom item template.
     * @param {Object} context - option data.
     */
    item(context: {
        /**
         * Option.
         */
        $implicit: any;
        /**
         * Option index.
         */
        index: number;
    }): TemplateRef<{
        $implicit: any;
        index: number;
    }>;
    /**
     * Custom group template.
     * @param {Object} context - group data.
     */
    group(context: {
        /**
         * Option group.
         */
        $implicit: any | any[];
    }): TemplateRef<{
        $implicit: any | any[];
    }>;
    /**
     * Custom selected item template, only supported in multiple mode.
     * @param {Object} context - selected item data.
     */
    selectedItem(context: {
        /**
         * Selected value.
         */
        $implicit: any;
    }): TemplateRef<{
        $implici: any;
    }>;
    /**
     * Custom header template.
     */
    header(): TemplateRef<any>;
    /**
     * Custom empty template.
     */
    empty(): TemplateRef<any>;
    /**
     * Custom footer template.
     */
    footer(): TemplateRef<any>;
    /**
     * Custom loader template.
     * @param {Object} context - scroller options.
     */
    loader(context: {
        /**
         * Virtual scroller options.
         */
        $implicit: ScrollerOptions;
    }): TemplateRef<{
        $implicit: ScrollerOptions;
    }>;
    /**
     * Custom remove icon template.
     */
    removeicon(context: {
        /**
         * Class of the removeicon.
         */
        class: string;
        /**
         * Remove callback.
         */
        removeCallback: (event: Event, index: number) => void;
        /**
         * Option index.
         */
        index: number;
    }): TemplateRef<{
        class: string;
        removeCallback: (event: Event, index: number) => void;
        index: number;
    }>;
    /**
     * Custom loading icon template.
     */
    loadingicon(): TemplateRef<any>;
    /**
     * Custom clear icon template.
     */
    clearicon(): TemplateRef<any>;
    /**
     * Custom dropdown icon template.
     */
    dropdownicon(): TemplateRef<any>;
}

/**
 *
 * AutoComplete is an input component that provides real-time suggestions while being typed.
 *
 * [Live Demo](https://www.primeng.org/autocomplete/)
 *
 * @module autocompletestyle
 *
 */
declare enum AutoCompleteClasses {
    /**
     * Class name of the root element
     */
    root = "p-autocomplete",
    /**
     * Class name of the input element
     */
    pcInputText = "p-autocomplete-input",
    /**
     * Class name of the input multiple element
     */
    inputMultiple = "p-autocomplete-input-multiple",
    /**
     * Class name of the chip item element
     */
    chipItem = "p-autocomplete-chip-item",
    /**
     * Class name of the chip element
     */
    pcChip = "p-autocomplete-chip",
    /**
     * Class name of the chip icon element
     */
    chipIcon = "p-autocomplete-chip-icon",
    /**
     * Class name of the input chip element
     */
    inputChip = "p-autocomplete-input-chip",
    /**
     * Class name of the loader element
     */
    loader = "p-autocomplete-loader",
    /**
     * Class name of the dropdown element
     */
    dropdown = "p-autocomplete-dropdown",
    /**
     * Class name of the panel element
     */
    panel = "p-autocomplete-overlay",
    /**
     * Class name of the list element
     */
    list = "p-autocomplete-list",
    /**
     * Class name of the option group element
     */
    optionGroup = "p-autocomplete-option-group",
    /**
     * Class name of the option element
     */
    option = "p-autocomplete-option",
    /**
     * Class name of the empty message element
     */
    emptyMessage = "p-autocomplete-empty-message",
    /**
     * Class name of the clear icon
     */
    clearIcon = "p-autocomplete-clear-icon"
}
declare class AutoCompleteStyle extends BaseStyle {
    name: string;
    theme: string;
    classes: {
        root: ({ instance }: {
            instance: any;
        }) => (string | {
            'p-invalid': any;
            'p-focus': any;
            'p-inputwrapper-filled': any;
            'p-inputwrapper-focus': any;
            'p-autocomplete-open': any;
            'p-autocomplete-clearable': boolean;
            'p-autocomplete-fluid': any;
        })[];
        pcInputText: string;
        inputMultiple: ({ instance }: {
            instance: any;
        }) => (string | {
            'p-disabled': any;
            'p-variant-filled': boolean;
        })[];
        chipItem: ({ instance, i }: {
            instance: any;
            i: any;
        }) => (string | {
            'p-focus': boolean;
        })[];
        pcChip: string;
        chipIcon: string;
        inputChip: string;
        loader: string;
        dropdown: string;
        overlay: ({ instance }: {
            instance: any;
        }) => (string | {
            'p-input-filled': boolean;
            'p-ripple-disabled': boolean;
        })[];
        listContainer: string;
        list: string;
        optionGroup: string;
        option: ({ instance, option, i, scrollerOptions }: {
            instance: any;
            option: any;
            i: any;
            scrollerOptions: any;
        }) => {
            'p-autocomplete-option': boolean;
            'p-autocomplete-option-selected': any;
            'p-focus': boolean;
            'p-disabled': any;
        };
        emptyMessage: string;
        clearIcon: string;
    };
    inlineStyles: {
        root: {
            position: string;
        };
    };
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<AutoCompleteStyle, never>;
    static ɵprov: _angular_core.ɵɵInjectableDeclaration<AutoCompleteStyle>;
}
interface AutoCompleteStyle extends BaseStyle {
}

declare const AUTOCOMPLETE_VALUE_ACCESSOR: any;
/**
 * AutoComplete is an input component that provides real-time suggestions when being typed.
 * @group Components
 */
declare class AutoComplete extends BaseInput implements AfterViewChecked, AfterContentInit, OnDestroy {
    overlayService: OverlayService;
    private zone;
    /**
     * Minimum number of characters to initiate a search.
     * @deprecated since v20.0.0, use `minQueryLength` instead.
     * @group Props
     */
    minLength: number;
    /**
     * Minimum number of characters to initiate a search.
     * @group Props
     */
    minQueryLength: number | undefined;
    /**
     * Delay between keystrokes to wait before sending a query.
     * @group Props
     */
    delay: number;
    /**
     * Inline style of the overlay panel element.
     * @group Props
     */
    panelStyle: {
        [klass: string]: any;
    } | null | undefined;
    /**
     * Style class of the component.
     * @deprecated since v20.0.0, use `class` instead.
     * @group Props
     */
    styleClass: string | undefined;
    /**
     * Style class of the overlay panel element.
     * @group Props
     */
    panelStyleClass: string | undefined;
    /**
     * Inline style of the input field.
     * @group Props
     */
    inputStyle: {
        [klass: string]: any;
    } | null | undefined;
    /**
     * Identifier of the focus input to match a label defined for the component.
     * @group Props
     */
    inputId: string | undefined;
    /**
     * Inline style of the input field.
     * @group Props
     */
    inputStyleClass: string | undefined;
    /**
     * Hint text for the input field.
     * @group Props
     */
    placeholder: string | undefined;
    /**
     * When present, it specifies that the input cannot be typed.
     * @group Props
     */
    readonly: boolean | undefined;
    /**
     * Maximum height of the suggestions panel.
     * @group Props
     */
    scrollHeight: string;
    /**
     * Defines if data is loaded and interacted with in lazy manner.
     * @group Props
     */
    lazy: boolean;
    /**
     * Whether the data should be loaded on demand during scroll.
     * @group Props
     */
    virtualScroll: boolean | undefined;
    /**
     * Height of an item in the list for VirtualScrolling.
     * @group Props
     */
    virtualScrollItemSize: number | undefined;
    /**
     * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.
     * @group Props
     */
    virtualScrollOptions: ScrollerOptions | undefined;
    /**
     * When enabled, highlights the first item in the list by default.
     * @group Props
     */
    autoHighlight: boolean | undefined;
    /**
     * When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions.
     * @group Props
     */
    forceSelection: boolean | undefined;
    /**
     * Type of the input, defaults to "text".
     * @group Props
     */
    type: string;
    /**
     * Whether to automatically manage layering.
     * @group Props
     */
    autoZIndex: boolean;
    /**
     * Base zIndex value to use in layering.
     * @group Props
     */
    baseZIndex: number;
    /**
     * Defines a string that labels the input for accessibility.
     * @group Props
     */
    ariaLabel: string | undefined;
    /**
     * Defines a string that labels the dropdown button for accessibility.
     * @group Props
     */
    dropdownAriaLabel: string | undefined;
    /**
     * Specifies one or more IDs in the DOM that labels the input field.
     * @group Props
     */
    ariaLabelledBy: string | undefined;
    /**
     * Icon class of the dropdown icon.
     * @group Props
     */
    dropdownIcon: string | undefined;
    /**
     * Ensures uniqueness of selected items on multiple mode.
     * @group Props
     */
    unique: boolean;
    /**
     * Whether to display options as grouped when nested options are provided.
     * @group Props
     */
    group: boolean | undefined;
    /**
     * Whether to run a query when input receives focus.
     * @group Props
     */
    completeOnFocus: boolean;
    /**
     * When enabled, a clear icon is displayed to clear the value.
     * @group Props
     */
    showClear: boolean;
    /**
     * Displays a button next to the input field when enabled.
     * @group Props
     */
    dropdown: boolean | undefined;
    /**
     * Whether to show the empty message or not.
     * @group Props
     */
    showEmptyMessage: boolean | undefined;
    /**
     * Specifies the behavior dropdown button. Default "blank" mode sends an empty string and "current" mode sends the input value.
     * @group Props
     */
    dropdownMode: string;
    /**
     * Specifies if multiple values can be selected.
     * @group Props
     */
    multiple: boolean | undefined;
    /**
     * Index of the element in tabbing order.
     * @group Props
     */
    tabindex: number | undefined;
    /**
     * A property to uniquely identify a value in options.
     * @group Props
     */
    dataKey: string | undefined;
    /**
     * Text to display when there is no data. Defaults to global value in i18n translation configuration.
     * @group Props
     */
    emptyMessage: string | undefined;
    /**
     * Transition options of the show animation.
     * @group Props
     */
    showTransitionOptions: string;
    /**
     * Transition options of the hide animation.
     * @group Props
     */
    hideTransitionOptions: string;
    /**
     * When present, it specifies that the component should automatically get focus on load.
     * @group Props
     */
    autofocus: boolean | undefined;
    /**
     * Used to define a string that autocomplete attribute the current element.
     * @group Props
     */
    autocomplete: string;
    /**
     * Name of the options field of an option group.
     * @group Props
     */
    optionGroupChildren: string | undefined;
    /**
     * Name of the label field of an option group.
     * @group Props
     */
    optionGroupLabel: string | undefined;
    /**
     * Options for the overlay element.
     * @group Props
     */
    overlayOptions: OverlayOptions | undefined;
    /**
     * An array of suggestions to display.
     * @group Props
     */
    get suggestions(): any[];
    set suggestions(value: any[]);
    /**
     * Property name or getter function to use as the label of an option.
     * @group Props
     */
    optionLabel: string | ((item: any) => string) | undefined;
    /**
     * Property name or getter function to use as the value of an option.
     * @group Props
     */
    optionValue: string | ((item: any) => string) | undefined;
    /**
     * Unique identifier of the component.
     * @group Props
     */
    id: string | undefined;
    /**
     * Text to display when the search is active. Defaults to global value in i18n translation configuration.
     * @group Props
     * @defaultValue '{0} results are available'
     */
    searchMessage: string | undefined;
    /**
     * Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration.
     * @group Props
     * @defaultValue 'No selected item'
     */
    emptySelectionMessage: string | undefined;
    /**
     * Text to be displayed in hidden accessible field when options are selected. Defaults to global value in i18n translation configuration.
     * @group Props
     * @defaultValue '{0} items selected'
     */
    selectionMessage: string | undefined;
    /**
     * Whether to focus on the first visible or selected element when the overlay panel is shown.
     * @group Props
     */
    autoOptionFocus: boolean | undefined;
    /**
     * When enabled, the focused option is selected.
     * @group Props
     */
    selectOnFocus: boolean | undefined;
    /**
     * Locale to use in searching. The default locale is the host environment's current locale.
     * @group Props
     */
    searchLocale: boolean | undefined;
    /**
     * Property name or getter function to use as the disabled flag of an option, defaults to false when not defined.
     * @group Props
     */
    optionDisabled: string | ((item: any) => string) | undefined;
    /**
     * When enabled, the hovered option will be focused.
     * @group Props
     */
    focusOnHover: boolean | undefined;
    /**
     * Whether typeahead is active or not.
     * @defaultValue true
     * @group Props
     */
    typeahead: boolean;
    /**
     * Target element to attach the overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
     * @defaultValue 'self'
     * @group Props
     */
    appendTo: _angular_core.InputSignal<any>;
    /**
     * Callback to invoke to search for suggestions.
     * @param {AutoCompleteCompleteEvent} event - Custom complete event.
     * @group Emits
     */
    completeMethod: EventEmitter<AutoCompleteCompleteEvent>;
    /**
     * Callback to invoke when a suggestion is selected.
     * @param {AutoCompleteSelectEvent} event - custom select event.
     * @group Emits
     */
    onSelect: EventEmitter<AutoCompleteSelectEvent>;
    /**
     * Callback to invoke when a selected value is removed.
     * @param {AutoCompleteUnselectEvent} event - custom unselect event.
     * @group Emits
     */
    onUnselect: EventEmitter<AutoCompleteUnselectEvent>;
    /**
     * Callback to invoke when the component receives focus.
     * @param {Event} event - Browser event.
     * @group Emits
     */
    onFocus: EventEmitter<Event>;
    /**
     * Callback to invoke when the component loses focus.
     * @param {Event} event - Browser event.
     * @group Emits
     */
    onBlur: EventEmitter<Event>;
    /**
     * Callback to invoke to when dropdown button is clicked.
     * @param {AutoCompleteDropdownClickEvent} event - custom dropdown click event.
     * @group Emits
     */
    onDropdownClick: EventEmitter<AutoCompleteDropdownClickEvent>;
    /**
     * Callback to invoke when clear button is clicked.
     * @param {Event} event - Browser event.
     * @group Emits
     */
    onClear: EventEmitter<Event | undefined>;
    /**
     * Callback to invoke on input key up.
     * @param {KeyboardEvent} event - Keyboard event.
     * @group Emits
     */
    onKeyUp: EventEmitter<KeyboardEvent>;
    /**
     * Callback to invoke on overlay is shown.
     * @param {Event} event - Browser event.
     * @group Emits
     */
    onShow: EventEmitter<Event>;
    /**
     * Callback to invoke on overlay is hidden.
     * @param {Event} event - Browser event.
     * @group Emits
     */
    onHide: EventEmitter<Event>;
    /**
     * Callback to invoke on lazy load data.
     * @param {AutoCompleteLazyLoadEvent} event - Lazy load event.
     * @group Emits
     */
    onLazyLoad: EventEmitter<AutoCompleteLazyLoadEvent>;
    inputEL: Nullable<ElementRef>;
    multiInputEl: Nullable<ElementRef>;
    multiContainerEL: Nullable<ElementRef>;
    dropdownButton: Nullable<ElementRef>;
    itemsViewChild: Nullable<ElementRef>;
    scroller: Nullable<Scroller>;
    overlayViewChild: Overlay;
    itemsWrapper: Nullable<HTMLDivElement>;
    /**
     * Custom item template.
     * @group Templates
     */
    itemTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom empty message template.
     * @group Templates
     */
    emptyTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom header template.
     * @group Templates
     */
    headerTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom footer template.
     * @group Templates
     */
    footerTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom selected item template.
     * @group Templates
     */
    selectedItemTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom group item template.
     * @group Templates
     */
    groupTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom loader template.
     * @group Templates
     */
    loaderTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom remove icon template.
     * @group Templates
     */
    removeIconTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom loading icon template.
     * @group Templates
     */
    loadingIconTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom clear icon template.
     * @group Templates
     */
    clearIconTemplate: Nullable<TemplateRef<any>>;
    /**
     * Custom dropdown icon template.
     * @group Templates
     */
    dropdownIconTemplate: Nullable<TemplateRef<any>>;
    onHostClick(event: MouseEvent): void;
    private primeng;
    value: string | any;
    _suggestions: _angular_core.WritableSignal<any>;
    timeout: Nullable<any>;
    overlayVisible: boolean | undefined;
    suggestionsUpdated: Nullable<boolean>;
    highlightOption: any;
    highlightOptionChanged: Nullable<boolean>;
    focused: boolean;
    loading: Nullable<boolean>;
    scrollHandler: Nullable<ConnectedOverlayScrollHandler>;
    listId: string | undefined;
    searchTimeout: any;
    dirty: boolean;
    _itemTemplate: TemplateRef<any>;
    _groupTemplate: TemplateRef<any>;
    _selectedItemTemplate: TemplateRef<any>;
    _headerTemplate: TemplateRef<any>;
    _emptyTemplate: TemplateRef<any>;
    _footerTemplate: TemplateRef<any>;
    _loaderTemplate: TemplateRef<any>;
    _removeIconTemplate: TemplateRef<any>;
    _loadingIconTemplate: TemplateRef<any>;
    _clearIconTemplate: TemplateRef<any>;
    _dropdownIconTemplate: TemplateRef<any>;
    focusedMultipleOptionIndex: _angular_core.WritableSignal<number>;
    focusedOptionIndex: _angular_core.WritableSignal<number>;
    _componentStyle: AutoCompleteStyle;
    $appendTo: _angular_core.Signal<any>;
    visibleOptions: _angular_core.Signal<any>;
    inputValue: _angular_core.Signal<any>;
    get focusedMultipleOptionId(): string;
    get focusedOptionId(): string;
    get searchResultMessageText(): string;
    get searchMessageText(): string;
    get emptySearchMessageText(): string;
    get selectionMessageText(): string;
    get emptySelectionMessageText(): string;
    get selectedMessageText(): string;
    get ariaSetSize(): any;
    get listLabel(): string;
    get virtualScrollerDisabled(): boolean;
    get optionValueSelected(): string | ((item: any) => string);
    chipItemClass(index: any): (string | {
        'p-focus': boolean;
    })[];
    constructor(overlayService: OverlayService, zone: NgZone);
    ngOnInit(): void;
    templates: QueryList<PrimeTemplate> | undefined;
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    handleSuggestionsChange(): void;
    flatOptions(options: any): any;
    isOptionGroup(option: any): any;
    findFirstOptionIndex(): any;
    findLastOptionIndex(): number;
    findFirstFocusedOptionIndex(): any;
    findLastFocusedOptionIndex(): any;
    findSelectedOptionIndex(): any;
    findNextOptionIndex(index: any): any;
    findPrevOptionIndex(index: any): any;
    isValidSelectedOption(option: any): string | boolean;
    isValidOption(option: any): boolean;
    isOptionDisabled(option: any): any;
    isSelected(option: any): string | boolean;
    isOptionMatched(option: any, value: any): boolean;
    isInputClicked(event: any): boolean;
    isDropdownClicked(event: any): any;
    equalityKey(): string;
    onContainerClick(event: any): void;
    handleDropdownClick(event: any): void;
    onInput(event: any): void;
    onInputChange(event: any): void;
    onInputFocus(event: any): void;
    onMultipleContainerFocus(event: any): void;
    onMultipleContainerBlur(event: any): void;
    onMultipleContainerKeyDown(event: any): void;
    onInputBlur(event: any): void;
    onInputPaste(event: any): void;
    onInputKeyUp(event: any): void;
    onKeyDown(event: any): void;
    onArrowDownKey(event: any): void;
    onArrowUpKey(event: any): void;
    onArrowLeftKey(event: any): void;
    onArrowRightKey(event: any): void;
    onHomeKey(event: any): void;
    onEndKey(event: any): void;
    onPageDownKey(event: any): void;
    onPageUpKey(event: any): void;
    onEnterKey(event: any): void;
    onEscapeKey(event: any): void;
    onTabKey(event: any): void;
    onBackspaceKey(event: any): void;
    onArrowLeftKeyOnMultiple(event: any): void;
    onArrowRightKeyOnMultiple(event: any): void;
    onBackspaceKeyOnMultiple(event: any): void;
    onOptionSelect(event: any, option: any, isHide?: boolean): void;
    onOptionMouseEnter(event: any, index: any): void;
    search(event: any, query: any, source: any): void;
    removeOption(event: any, index: any): void;
    updateModel(value: any): void;
    updateInputValue(): void;
    autoUpdateModel(): void;
    scrollInView(index?: number): void;
    changeFocusedOptionIndex(event: any, index: any): void;
    show(isFocus?: boolean): void;
    hide(isFocus?: boolean): void;
    clear(): void;
    hasSelectedOption(): boolean;
    getAriaPosInset(index: any): any;
    getOptionLabel(option: any): any;
    getOptionValue(option: any): any;
    getOptionIndex(index: any, scrollerOptions: any): any;
    getOptionGroupLabel(optionGroup: any): any;
    getOptionGroupChildren(optionGroup: any): any;
    onOverlayAnimationStart(event: AnimationEvent): void;
    /**
     * @override
     *
     * @see {@link BaseEditableHolder.writeControlValue}
     * Writes the value to the control.
     */
    writeControlValue(value: any, setModelValue: (value: any) => void): void;
    ngOnDestroy(): void;
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<AutoComplete, never>;
    static ɵcmp: _angular_core.ɵɵComponentDeclaration<AutoComplete, "p-autoComplete, p-autocomplete, p-auto-complete", never, { "minLength": { "alias": "minLength"; "required": false; }; "minQueryLength": { "alias": "minQueryLength"; "required": false; }; "delay": { "alias": "delay"; "required": false; }; "panelStyle": { "alias": "panelStyle"; "required": false; }; "styleClass": { "alias": "styleClass"; "required": false; }; "panelStyleClass": { "alias": "panelStyleClass"; "required": false; }; "inputStyle": { "alias": "inputStyle"; "required": false; }; "inputId": { "alias": "inputId"; "required": false; }; "inputStyleClass": { "alias": "inputStyleClass"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "scrollHeight": { "alias": "scrollHeight"; "required": false; }; "lazy": { "alias": "lazy"; "required": false; }; "virtualScroll": { "alias": "virtualScroll"; "required": false; }; "virtualScrollItemSize": { "alias": "virtualScrollItemSize"; "required": false; }; "virtualScrollOptions": { "alias": "virtualScrollOptions"; "required": false; }; "autoHighlight": { "alias": "autoHighlight"; "required": false; }; "forceSelection": { "alias": "forceSelection"; "required": false; }; "type": { "alias": "type"; "required": false; }; "autoZIndex": { "alias": "autoZIndex"; "required": false; }; "baseZIndex": { "alias": "baseZIndex"; "required": false; }; "ariaLabel": { "alias": "ariaLabel"; "required": false; }; "dropdownAriaLabel": { "alias": "dropdownAriaLabel"; "required": false; }; "ariaLabelledBy": { "alias": "ariaLabelledBy"; "required": false; }; "dropdownIcon": { "alias": "dropdownIcon"; "required": false; }; "unique": { "alias": "unique"; "required": false; }; "group": { "alias": "group"; "required": false; }; "completeOnFocus": { "alias": "completeOnFocus"; "required": false; }; "showClear": { "alias": "showClear"; "required": false; }; "dropdown": { "alias": "dropdown"; "required": false; }; "showEmptyMessage": { "alias": "showEmptyMessage"; "required": false; }; "dropdownMode": { "alias": "dropdownMode"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "tabindex": { "alias": "tabindex"; "required": false; }; "dataKey": { "alias": "dataKey"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "showTransitionOptions": { "alias": "showTransitionOptions"; "required": false; }; "hideTransitionOptions": { "alias": "hideTransitionOptions"; "required": false; }; "autofocus": { "alias": "autofocus"; "required": false; }; "autocomplete": { "alias": "autocomplete"; "required": false; }; "optionGroupChildren": { "alias": "optionGroupChildren"; "required": false; }; "optionGroupLabel": { "alias": "optionGroupLabel"; "required": false; }; "overlayOptions": { "alias": "overlayOptions"; "required": false; }; "suggestions": { "alias": "suggestions"; "required": false; }; "optionLabel": { "alias": "optionLabel"; "required": false; }; "optionValue": { "alias": "optionValue"; "required": false; }; "id": { "alias": "id"; "required": false; }; "searchMessage": { "alias": "searchMessage"; "required": false; }; "emptySelectionMessage": { "alias": "emptySelectionMessage"; "required": false; }; "selectionMessage": { "alias": "selectionMessage"; "required": false; }; "autoOptionFocus": { "alias": "autoOptionFocus"; "required": false; }; "selectOnFocus": { "alias": "selectOnFocus"; "required": false; }; "searchLocale": { "alias": "searchLocale"; "required": false; }; "optionDisabled": { "alias": "optionDisabled"; "required": false; }; "focusOnHover": { "alias": "focusOnHover"; "required": false; }; "typeahead": { "alias": "typeahead"; "required": false; }; "appendTo": { "alias": "appendTo"; "required": false; "isSignal": true; }; }, { "completeMethod": "completeMethod"; "onSelect": "onSelect"; "onUnselect": "onUnselect"; "onFocus": "onFocus"; "onBlur": "onBlur"; "onDropdownClick": "onDropdownClick"; "onClear": "onClear"; "onKeyUp": "onKeyUp"; "onShow": "onShow"; "onHide": "onHide"; "onLazyLoad": "onLazyLoad"; }, ["itemTemplate", "emptyTemplate", "headerTemplate", "footerTemplate", "selectedItemTemplate", "groupTemplate", "loaderTemplate", "removeIconTemplate", "loadingIconTemplate", "clearIconTemplate", "dropdownIconTemplate", "templates"], never, true, never>;
    static ngAcceptInputType_minLength: unknown;
    static ngAcceptInputType_minQueryLength: unknown;
    static ngAcceptInputType_delay: unknown;
    static ngAcceptInputType_readonly: unknown;
    static ngAcceptInputType_lazy: unknown;
    static ngAcceptInputType_virtualScroll: unknown;
    static ngAcceptInputType_virtualScrollItemSize: unknown;
    static ngAcceptInputType_autoHighlight: unknown;
    static ngAcceptInputType_forceSelection: unknown;
    static ngAcceptInputType_autoZIndex: unknown;
    static ngAcceptInputType_baseZIndex: unknown;
    static ngAcceptInputType_unique: unknown;
    static ngAcceptInputType_group: unknown;
    static ngAcceptInputType_completeOnFocus: unknown;
    static ngAcceptInputType_showClear: unknown;
    static ngAcceptInputType_dropdown: unknown;
    static ngAcceptInputType_showEmptyMessage: unknown;
    static ngAcceptInputType_multiple: unknown;
    static ngAcceptInputType_tabindex: unknown;
    static ngAcceptInputType_autofocus: unknown;
    static ngAcceptInputType_autoOptionFocus: unknown;
    static ngAcceptInputType_selectOnFocus: unknown;
    static ngAcceptInputType_searchLocale: unknown;
    static ngAcceptInputType_focusOnHover: unknown;
    static ngAcceptInputType_typeahead: unknown;
}
declare class AutoCompleteModule {
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<AutoCompleteModule, never>;
    static ɵmod: _angular_core.ɵɵNgModuleDeclaration<AutoCompleteModule, never, [typeof AutoComplete], [typeof AutoComplete, typeof i1.SharedModule]>;
    static ɵinj: _angular_core.ɵɵInjectorDeclaration<AutoCompleteModule>;
}

export { AUTOCOMPLETE_VALUE_ACCESSOR, AutoComplete, AutoCompleteClasses, AutoCompleteModule, AutoCompleteStyle };
export type { AutoCompleteCompleteEvent, AutoCompleteDropdownClickEvent, AutoCompleteLazyLoadEvent, AutoCompleteSelectEvent, AutoCompleteTemplates, AutoCompleteUnselectEvent };
