{"version":3,"file":"primeng-inputmask.mjs","sources":["../../src/inputmask/style/inputmaskstyle.ts","../../src/inputmask/inputmask.ts","../../src/inputmask/primeng-inputmask.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BaseStyle } from 'primeng/base';\n\nconst theme = /*css*/ `\n    /* For PrimeNG */\n    p-inputmask {\n        position: relative;\n    }\n\n    .p-inputmask-clear-icon {\n        position: absolute;\n        top: 50%;\n        margin-top: -0.5rem;\n        cursor: pointer;\n        inset-inline-end: dt('form.field.padding.x');\n        color: dt('form.field.icon.color');\n    }\n\n    p-inputMask:has(.p-inputtext-fluid),\n    p-input-mask:has(.p-inputtext-fluid),\n    p-inputmask:has(.p-inputtext-fluid) {\n        width: 100%;\n    }\n\n    p-inputMask.ng-invalid.ng-dirty > .p-inputtext,\n    p-input-mask.ng-invalid.ng-dirty > .p-inputtext,\n    p-inputmask.ng-invalid.ng-dirty > .p-inputtext {\n        border-color: dt('inputtext.invalid.border.color');\n    }\n\n    p-inputMask.ng-invalid.ng-dirty > .p-inputtext:enabled:focus,\n    p-input-mask.ng-invalid.ng-dirty > .p-inputtext:enabled:focus,\n    p-inputmask.ng-invalid.ng-dirty > .p-inputtext:enabled:focus {\n        border-color: dt('inputtext.focus.border.color');\n    }\n\n    p-inputMask.ng-invalid.ng-dirty > .p-inputtext::placeholder,\n    p-input-mask.ng-invalid.ng-dirty > .p-inputtext::placeholder,\n    p-inputmask.ng-invalid.ng-dirty > .p-inputtext::placeholder {\n        color: dt('inputtext.invalid.placeholder.color');\n    }\n`;\n\nconst classes = {\n    root: ({ instance }) => [\n        'p-inputmask p-component p-inputwrapper',\n        {\n            'p-variant-filled': instance.$variant() === 'filled'\n        }\n    ],\n    clearIcon: 'p-inputmask-clear-icon'\n};\n\n@Injectable()\nexport class InputMaskStyle extends BaseStyle {\n    name = 'inputmask';\n\n    theme = theme;\n\n    classes = classes;\n}\n\n/**\n *\n * InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n *\n * [Live Demo](https://www.primeng.org/inputmask/)\n *\n * @module inputmaskstyle\n *\n */\n\nexport enum InputMaskClasses {\n    /**\n     * Class name of the root element\n     */\n    root = 'p-inputmask',\n    /**\n     * Class name of the clear icon element\n     */\n    clearIcon = 'p-inputmask-clear-icon'\n}\n\nexport interface InputMaskStyle extends BaseStyle {}\n","/*\n    Port of jQuery MaskedInput by DigitalBush as a Native Angular2 Component in Typescript without jQuery\n    https://github.com/digitalBush/jquery.maskedinput/\n\n    Copyright (c) 2007-2014 Josh Bush (digitalbush.com)\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport {\n    AfterContentInit,\n    booleanAttribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    inject,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { getUserAgent, isClient } from '@primeuix/utils';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { AutoFocus } from 'primeng/autofocus';\nimport { BaseInput } from 'primeng/baseinput';\nimport { TimesIcon } from 'primeng/icons';\nimport { InputText } from 'primeng/inputtext';\nimport { Nullable } from 'primeng/ts-helpers';\nimport { Caret } from './inputmask.interface';\nimport { InputMaskStyle } from './style/inputmaskstyle';\n\nexport const INPUTMASK_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputMask),\n    multi: true\n};\n/**\n * InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n * @group Components\n */\n@Component({\n    selector: 'p-inputmask, p-inputMask, p-input-mask',\n    standalone: true,\n    imports: [CommonModule, InputText, AutoFocus, TimesIcon, SharedModule],\n    template: `\n        <input\n            #input\n            pInputText\n            [attr.id]=\"inputId\"\n            [attr.type]=\"type\"\n            [attr.name]=\"name()\"\n            [invalid]=\"invalid()\"\n            [class]=\"styleClass\"\n            [ngStyle]=\"style\"\n            [attr.placeholder]=\"placeholder\"\n            [attr.title]=\"title\"\n            [pSize]=\"size()\"\n            [attr.size]=\"inputSize()\"\n            [attr.autocomplete]=\"autocomplete\"\n            [attr.maxlength]=\"maxlength()\"\n            [attr.minlength]=\"minlength()\"\n            [attr.tabindex]=\"tabindex\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledBy]=\"ariaLabelledBy\"\n            [attr.aria-required]=\"ariaRequired\"\n            [attr.required]=\"required() ? '' : undefined\"\n            [attr.readonly]=\"readonly ? '' : undefined\"\n            [attr.disabled]=\"$disabled() ? '' : undefined\"\n            (focus)=\"onInputFocus($event)\"\n            (blur)=\"onInputBlur($event)\"\n            (keydown)=\"onInputKeydown($event)\"\n            (keypress)=\"onKeyPress($event)\"\n            [variant]=\"$variant()\"\n            [pAutoFocus]=\"autofocus\"\n            (input)=\"onInputChange($event)\"\n            (paste)=\"handleInputChange($event)\"\n            [attr.data-pc-name]=\"'inputmask'\"\n            [attr.data-pc-section]=\"'root'\"\n            [fluid]=\"hasFluid\"\n        />\n        <ng-container *ngIf=\"value != null && $filled() && showClear && !$disabled()\">\n            <svg data-p-icon=\"times\" *ngIf=\"!clearIconTemplate && !_clearIconTemplate\" [class]=\"cx('clearIcon')\" (click)=\"clear()\" [attr.data-pc-section]=\"'clearIcon'\" />\n            <span *ngIf=\"clearIconTemplate || _clearIconTemplate\" [class]=\"cx('clearIcon')\" (click)=\"clear()\" [attr.data-pc-section]=\"'clearIcon'\">\n                <ng-template *ngTemplateOutlet=\"clearIconTemplate || _clearIconTemplate\"></ng-template>\n            </span>\n        </ng-container>\n    `,\n    providers: [INPUTMASK_VALUE_ACCESSOR, InputMaskStyle],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '[class]': \"cx('root')\"\n    }\n})\nexport class InputMask extends BaseInput implements OnInit, AfterContentInit {\n    /**\n     * HTML5 input type.\n     * @group Props\n     */\n    @Input() type: string = 'text';\n    /**\n     * Placeholder character in mask, default is underscore.\n     * @group Props\n     */\n    @Input() slotChar: string = '_';\n    /**\n     * Clears the incomplete value on blur.\n     * @group Props\n     */\n    @Input({ transform: booleanAttribute }) autoClear: boolean = true;\n    /**\n     * When enabled, a clear icon is displayed to clear the value.\n     * @group Props\n     */\n    @Input({ transform: booleanAttribute }) showClear: boolean = false;\n    /**\n     * Inline style of the input field.\n     * @group Props\n     */\n    @Input() style: { [klass: string]: any } | null | undefined;\n    /**\n     * Identifier of the focus input to match a label defined for the component.\n     * @group Props\n     */\n    @Input() inputId: string | undefined;\n    /**\n     * Style class of the input field.\n     * @group Props\n     */\n    @Input() styleClass: string | undefined;\n    /**\n     * Advisory information to display on input.\n     * @group Props\n     */\n    @Input() placeholder: string | undefined;\n    /**\n     * Specifies tab order of the element.\n     * @group Props\n     */\n    @Input() tabindex: string | undefined;\n    /**\n     * Title text of the input text.\n     * @group Props\n     */\n    @Input() title: string | undefined;\n    /**\n     * Used to define a string that labels the input element.\n     * @group Props\n     */\n    @Input() ariaLabel: string | undefined;\n    /**\n     * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n     * @group Props\n     */\n    @Input() ariaLabelledBy: string | undefined;\n    /**\n     * Used to indicate that user input is required on an element before a form can be submitted.\n     * @group Props\n     */\n    @Input({ transform: booleanAttribute }) ariaRequired: boolean | undefined;\n    /**\n     * When present, it specifies that an input field is read-only.\n     * @group Props\n     */\n    @Input({ transform: booleanAttribute }) readonly: boolean | undefined;\n    /**\n     * Defines if ngModel sets the raw unmasked value to bound value or the formatted mask value.\n     * @group Props\n     */\n    @Input({ transform: booleanAttribute }) unmask: boolean | undefined;\n    /**\n     * Regex pattern for alpha characters\n     * @group Props\n     */\n    @Input() characterPattern: string = '[A-Za-z]';\n    /**\n     * When present, the input gets a focus automatically on load.\n     * @group Props\n     */\n    @Input({ transform: booleanAttribute }) autofocus: boolean | undefined;\n    /**\n     * Used to define a string that autocomplete attribute the current element.\n     * @group Props\n     */\n    @Input() autocomplete: string | undefined;\n    /**\n     * When present, it specifies that whether to clean buffer value from model.\n     * @group Props\n     */\n    @Input({ transform: booleanAttribute }) keepBuffer: boolean = false;\n    /**\n     * Mask pattern.\n     * @group Props\n     */\n    @Input() get mask(): string | undefined | null {\n        return this._mask;\n    }\n    set mask(val: string | undefined | null) {\n        this._mask = val;\n\n        this.initMask();\n        this.writeValue('');\n        this.onModelChange(this.value);\n    }\n    /**\n     * Callback to invoke when the mask is completed.\n     * @group Emits\n     */\n    @Output() onComplete: EventEmitter<any> = new EventEmitter<any>();\n    /**\n     * Callback to invoke when the component receives focus.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    @Output() onFocus: EventEmitter<Event> = new EventEmitter<Event>();\n    /**\n     * Callback to invoke when the component loses focus.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    @Output() onBlur: EventEmitter<Event> = new EventEmitter<Event>();\n    /**\n     * Callback to invoke on input.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    @Output() onInput: EventEmitter<Event> = new EventEmitter<Event>();\n    /**\n     * Callback to invoke on input key press.\n     * @param {Event} event - Browser event.\n     * @group Emits\n     */\n    @Output() onKeydown: EventEmitter<Event> = new EventEmitter<Event>();\n    /**\n     * Callback to invoke when input field is cleared.\n     * @group Emits\n     */\n    @Output() onClear: EventEmitter<any> = new EventEmitter<any>();\n    /**\n     * Template of the clear icon.\n     * @group Templates\n     */\n    @ContentChild('clearicon', { descendants: false }) clearIconTemplate: Nullable<TemplateRef<any>>;\n\n    @ContentChildren(PrimeTemplate) templates!: QueryList<PrimeTemplate>;\n\n    @ViewChild('input', { static: true }) inputViewChild: Nullable<ElementRef>;\n\n    value: Nullable<string>;\n\n    _mask: Nullable<string>;\n\n    input: Nullable<HTMLInputElement>;\n\n    defs: Nullable<{ [klass: string]: any }>;\n\n    tests: RegExp[] | any;\n\n    partialPosition: Nullable<number>;\n\n    firstNonMaskPos: Nullable<number>;\n\n    lastRequiredNonMaskPos: Nullable<number>;\n\n    len: Nullable<number>;\n\n    oldVal: Nullable<string>;\n\n    buffer: string[] | any;\n\n    defaultBuffer: Nullable<string>;\n\n    focusText: Nullable<string>;\n\n    caretTimeoutId: any;\n\n    androidChrome: boolean = true;\n\n    focused: Nullable<boolean>;\n\n    _componentStyle = inject(InputMaskStyle);\n\n    ngOnInit() {\n        super.ngOnInit();\n        if (isPlatformBrowser(this.platformId)) {\n            let ua = navigator.userAgent;\n            this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\n        }\n\n        this.initMask();\n    }\n\n    _clearIconTemplate: TemplateRef<any> | undefined;\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'clearicon':\n                    this._clearIconTemplate = item.template;\n                    break;\n            }\n        });\n    }\n\n    initMask() {\n        this.tests = [];\n        this.partialPosition = (this.mask as string).length;\n        this.len = (this.mask as string).length;\n        this.firstNonMaskPos = null;\n        this.defs = {\n            '9': '[0-9]',\n            a: this.characterPattern,\n            '*': `${this.characterPattern}|[0-9]`\n        };\n\n        let maskTokens = (this.mask as string).split('');\n        for (let i = 0; i < maskTokens.length; i++) {\n            let c = maskTokens[i];\n            if (c == '?') {\n                this.len--;\n                this.partialPosition = i;\n            } else if (this.defs[c]) {\n                this.tests.push(new RegExp(this.defs[c]));\n                if (this.firstNonMaskPos === null) {\n                    this.firstNonMaskPos = this.tests.length - 1;\n                }\n                if (i < this.partialPosition) {\n                    this.lastRequiredNonMaskPos = this.tests.length - 1;\n                }\n            } else {\n                this.tests.push(null);\n            }\n        }\n\n        this.buffer = [];\n        for (let i = 0; i < maskTokens.length; i++) {\n            let c = maskTokens[i];\n            if (c != '?') {\n                if (this.defs[c]) this.buffer.push(this.getPlaceholder(i));\n                else this.buffer.push(c);\n            }\n        }\n        this.defaultBuffer = this.buffer.join('');\n    }\n\n    caret(first?: number, last?: number): Caret | undefined {\n        let range, begin, end;\n\n        if (!this.inputViewChild?.nativeElement.offsetParent || this.inputViewChild.nativeElement !== this.inputViewChild.nativeElement.ownerDocument.activeElement) {\n            return;\n        }\n\n        if (typeof first == 'number') {\n            begin = first;\n            end = typeof last === 'number' ? last : begin;\n            if (this.inputViewChild.nativeElement.setSelectionRange) {\n                this.inputViewChild.nativeElement.setSelectionRange(begin, end);\n            } else if (this.inputViewChild.nativeElement['createTextRange']) {\n                range = this.inputViewChild.nativeElement['createTextRange']();\n                range.collapse(true);\n                range.moveEnd('character', end);\n                range.moveStart('character', begin);\n                range.select();\n            }\n        } else {\n            if (this.inputViewChild.nativeElement.setSelectionRange) {\n                begin = this.inputViewChild.nativeElement.selectionStart;\n                end = this.inputViewChild.nativeElement.selectionEnd;\n            } else if ((this.document as any['selection']) && (this.document as any)['selection'].createRange) {\n                range = (this.document as any['selection']).createRange();\n                begin = 0 - range.duplicate().moveStart('character', -100000);\n                end = begin + range.text.length;\n            }\n\n            return { begin: begin, end: end };\n        }\n    }\n\n    isCompleted(): boolean {\n        let completed: boolean;\n        for (let i = this.firstNonMaskPos as number; i <= (this.lastRequiredNonMaskPos as number); i++) {\n            if (this.tests[i] && (this.buffer as string[])[i] === this.getPlaceholder(i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    getPlaceholder(i: number) {\n        if (i < this.slotChar.length) {\n            return this.slotChar.charAt(i);\n        }\n        return this.slotChar.charAt(0);\n    }\n\n    seekNext(pos: number) {\n        while (++pos < (this.len as number) && !this.tests[pos]);\n        return pos;\n    }\n\n    seekPrev(pos: number) {\n        while (--pos >= 0 && !this.tests[pos]);\n        return pos;\n    }\n\n    shiftL(begin: number, end: number) {\n        let i, j;\n\n        if (begin < 0) {\n            return;\n        }\n\n        for (i = begin, j = this.seekNext(end); i < (this.len as number); i++) {\n            if (this.tests[i]) {\n                if (j < (this.len as number) && this.tests[i].test(this.buffer[j])) {\n                    this.buffer[i] = this.buffer[j];\n                    this.buffer[j] = this.getPlaceholder(j);\n                } else {\n                    break;\n                }\n\n                j = this.seekNext(j);\n            }\n        }\n        this.writeBuffer();\n        this.caret(Math.max(this.firstNonMaskPos as number, begin));\n    }\n\n    shiftR(pos: number) {\n        let i, c, j, t;\n\n        for (i = pos, c = this.getPlaceholder(pos); i < (this.len as number); i++) {\n            if (this.tests[i]) {\n                j = this.seekNext(i);\n                t = this.buffer[i];\n                this.buffer[i] = c;\n                if (j < (this.len as number) && this.tests[j].test(t)) {\n                    c = t;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    handleAndroidInput(e: Event) {\n        var curVal = this.inputViewChild?.nativeElement.value;\n        var pos = this.caret() as Caret;\n        if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\n            // a deletion or backspace happened\n            this.checkVal(true);\n            while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;\n            if (pos.begin === 0) {\n                while (pos.begin < (this.firstNonMaskPos as number) && !this.tests[pos.begin]) pos.begin++;\n            }\n\n            setTimeout(() => {\n                this.caret(pos.begin, pos.begin);\n                this.updateModel(e);\n                if (this.isCompleted()) {\n                    this.onComplete.emit();\n                }\n            }, 0);\n        } else {\n            this.checkVal(true);\n            while (pos.begin < (this.len as number) && !this.tests[pos.begin]) pos.begin++;\n\n            setTimeout(() => {\n                this.caret(pos.begin, pos.begin);\n                this.updateModel(e);\n                if (this.isCompleted()) {\n                    this.onComplete.emit();\n                }\n            }, 0);\n        }\n    }\n\n    onInputBlur(e: Event) {\n        this.focused = false;\n        this.onModelTouched();\n        if (!this.keepBuffer) {\n            this.checkVal();\n        }\n        this.onBlur.emit(e);\n\n        if (this.modelValue() != this.focusText || this.modelValue() != this.value) {\n            this.updateModel(e);\n            let event = this.document.createEvent('HTMLEvents');\n            event.initEvent('change', true, false);\n            this.inputViewChild?.nativeElement.dispatchEvent(event);\n        }\n    }\n\n    onInputKeydown(e: KeyboardEvent) {\n        if (this.readonly) {\n            return;\n        }\n\n        let k = e.which || e.keyCode,\n            pos,\n            begin,\n            end;\n        let iPhone;\n        if (isPlatformBrowser(this.platformId)) {\n            iPhone = /iphone/i.test(getUserAgent());\n        }\n        this.oldVal = this.inputViewChild?.nativeElement.value;\n\n        this.onKeydown.emit(e);\n\n        //backspace, delete, and escape get special treatment\n        if (k === 8 || k === 46 || (iPhone && k === 127)) {\n            pos = this.caret() as Caret;\n            begin = pos.begin;\n            end = pos.end;\n\n            if (end - begin === 0) {\n                begin = k !== 46 ? this.seekPrev(begin) : (end = this.seekNext(begin - 1));\n                end = k === 46 ? this.seekNext(end) : end;\n            }\n\n            this.clearBuffer(begin, end);\n            if (this.keepBuffer) {\n                this.shiftL(begin, end - 2);\n            } else {\n                this.shiftL(begin, end - 1);\n            }\n            this.updateModel(e);\n            this.onInput.emit(e);\n\n            e.preventDefault();\n        } else if (k === 13) {\n            // enter\n            this.onInputBlur(e);\n            this.updateModel(e);\n        } else if (k === 27) {\n            // escape\n            (this.inputViewChild as ElementRef).nativeElement.value = this.focusText;\n            this.caret(0, this.checkVal());\n            this.updateModel(e);\n\n            e.preventDefault();\n        }\n    }\n\n    onKeyPress(e: KeyboardEvent) {\n        if (this.readonly) {\n            return;\n        }\n\n        var k = e.which || e.keyCode,\n            pos = this.caret() as Caret,\n            p: number,\n            c: string,\n            next: number,\n            completed!: boolean;\n\n        if (e.ctrlKey || e.altKey || e.metaKey || k < 32 || (k > 34 && k < 41)) {\n            //Ignore\n            return;\n        } else if (k && k !== 13) {\n            if (pos.end - pos.begin !== 0) {\n                this.clearBuffer(pos.begin, pos.end);\n                this.shiftL(pos.begin, pos.end - 1);\n            }\n\n            p = this.seekNext(pos.begin - 1);\n            if (p < (this.len as number)) {\n                c = String.fromCharCode(k);\n                if (this.tests[p].test(c)) {\n                    this.shiftR(p);\n\n                    this.buffer[p] = c;\n                    this.writeBuffer();\n                    next = this.seekNext(p);\n\n                    if (isClient() && /android/i.test(getUserAgent())) {\n                        let proxy = () => {\n                            this.caret(next);\n                        };\n\n                        setTimeout(proxy, 0);\n                    } else {\n                        this.caret(next);\n                    }\n\n                    if (pos.begin <= (this.lastRequiredNonMaskPos as number)) {\n                        completed = this.isCompleted();\n                    }\n\n                    this.onInput.emit(e);\n                }\n            }\n            e.preventDefault();\n        }\n\n        this.updateModel(e);\n\n        if (completed) {\n            this.onComplete.emit();\n        }\n    }\n\n    clearBuffer(start: number, end: number) {\n        if (!this.keepBuffer) {\n            let i;\n            for (i = start; i < end && i < (this.len as number); i++) {\n                if (this.tests[i]) {\n                    this.buffer[i] = this.getPlaceholder(i);\n                }\n            }\n        }\n    }\n\n    writeBuffer() {\n        (this.inputViewChild as ElementRef).nativeElement.value = this.buffer.join('');\n    }\n\n    checkVal(allow?: boolean): number {\n        //try to place characters where they belong\n        let test = this.inputViewChild?.nativeElement.value,\n            lastMatch = -1,\n            i,\n            c,\n            pos;\n\n        for (i = 0, pos = 0; i < (this.len as number); i++) {\n            if (this.tests[i]) {\n                this.buffer[i] = this.getPlaceholder(i);\n                while (pos++ < test.length) {\n                    c = test.charAt(pos - 1);\n                    if (this.tests[i].test(c)) {\n                        if (!this.keepBuffer) {\n                            this.buffer[i] = c;\n                        }\n                        lastMatch = i;\n                        break;\n                    }\n                }\n                if (pos > test.length) {\n                    this.clearBuffer(i + 1, this.len as number);\n                    break;\n                }\n            } else {\n                if (this.buffer[i] === test.charAt(pos)) {\n                    pos++;\n                }\n                if (i < (this.partialPosition as number)) {\n                    lastMatch = i;\n                }\n            }\n        }\n        if (allow) {\n            this.writeBuffer();\n        } else if (lastMatch + 1 < (this.partialPosition as number)) {\n            if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\n                // Invalid value. Remove it and replace it with the\n                // mask, which is the default behavior.\n                if (this.inputViewChild?.nativeElement.value) this.inputViewChild.nativeElement.value = '';\n                this.clearBuffer(0, this.len as number);\n            } else {\n                // Invalid value, but we opt to show the value to the\n                // user and allow them to correct their mistake.\n                this.writeBuffer();\n            }\n        } else {\n            this.writeBuffer();\n            (this.inputViewChild as ElementRef).nativeElement.value = this.inputViewChild?.nativeElement.value.substring(0, lastMatch + 1);\n        }\n        return (this.partialPosition ? i : this.firstNonMaskPos) as number;\n    }\n\n    onInputFocus(event: Event) {\n        if (this.readonly) {\n            return;\n        }\n\n        this.focused = true;\n\n        clearTimeout(this.caretTimeoutId);\n        let pos: number;\n\n        this.focusText = this.inputViewChild?.nativeElement.value;\n\n        pos = this.keepBuffer ? this.inputViewChild?.nativeElement.value.length : this.checkVal();\n\n        this.caretTimeoutId = setTimeout(() => {\n            if (this.inputViewChild?.nativeElement !== this.inputViewChild?.nativeElement.ownerDocument.activeElement) {\n                return;\n            }\n            this.writeBuffer();\n            if (pos == this.mask?.replace('?', '').length) {\n                this.caret(0, pos);\n            } else {\n                this.caret(pos);\n            }\n        }, 10);\n\n        this.onFocus.emit(event);\n    }\n\n    onInputChange(event: Event) {\n        if (this.androidChrome) this.handleAndroidInput(event);\n        else this.handleInputChange(event);\n\n        this.onInput.emit(event);\n    }\n\n    handleInputChange(event: Event) {\n        if (this.readonly) {\n            return;\n        }\n\n        setTimeout(() => {\n            var pos = this.checkVal(true);\n            this.caret(pos);\n            this.updateModel(event);\n            if (this.isCompleted()) {\n                this.onComplete.emit();\n            }\n        }, 0);\n    }\n\n    getUnmaskedValue() {\n        let unmaskedBuffer = [];\n        for (let i = 0; i < this.buffer.length; i++) {\n            let c = this.buffer[i];\n            if (this.tests[i] && c != this.getPlaceholder(i)) {\n                unmaskedBuffer.push(c);\n            }\n        }\n\n        return unmaskedBuffer.join('');\n    }\n\n    updateModel(e: Event) {\n        const updatedValue = this.unmask ? this.getUnmaskedValue() : (e.target as HTMLInputElement).value;\n        if (updatedValue !== null || updatedValue !== undefined) {\n            this.value = updatedValue;\n            this.writeModelValue(this.value);\n            this.onModelChange(this.value);\n        }\n    }\n\n    focus() {\n        this.inputViewChild?.nativeElement.focus();\n    }\n\n    clear() {\n        (this.inputViewChild as ElementRef).nativeElement.value = '';\n        this.value = null;\n        this.onModelChange(this.value);\n        this.onClear.emit();\n    }\n\n    /**\n     * @override\n     *\n     * @see {@link BaseEditableHolder.writeControlValue}\n     * Writes the value to the control.\n     */\n    writeControlValue(value: any, setModelValue: (value: any) => void): void {\n        this.value = value;\n        setModelValue(this.value);\n\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\n            if (this.value == undefined || this.value == null) this.inputViewChild.nativeElement.value = '';\n            else this.inputViewChild.nativeElement.value = this.value;\n\n            this.checkVal();\n            this.focusText = this.inputViewChild.nativeElement.value;\n        }\n    }\n}\n\n@NgModule({\n    imports: [InputMask, SharedModule],\n    exports: [InputMask, SharedModule]\n})\nexport class InputMaskModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}