{"version":3,"file":"primeng-metergroup.mjs","sources":["../../src/metergroup/style/metergroupstyle.ts","../../src/metergroup/metergroup.ts","../../src/metergroup/primeng-metergroup.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { style } from '@primeuix/styles/metergroup';\nimport { BaseStyle } from 'primeng/base';\n\nconst classes = {\n    root: ({ instance }) => [\n        'p-metergroup p-component',\n        {\n            'p-metergroup-horizontal': instance.orientation === 'horizontal',\n            'p-metergroup-vertical': instance.orientation === 'vertical'\n        }\n    ],\n    meters: 'p-metergroup-meters',\n    meter: 'p-metergroup-meter',\n    labelList: ({ instance }) => [\n        'p-metergroup-label-list',\n        {\n            'p-metergroup-label-list-vertical': instance.labelOrientation === 'vertical',\n            'p-metergroup-label-list-horizontal': instance.labelOrientation === 'horizontal'\n        }\n    ],\n    label: 'p-metergroup-label',\n    labelIcon: 'p-metergroup-label-icon',\n    labelMarker: 'p-metergroup-label-marker',\n    labelText: 'p-metergroup-label-text'\n};\n\n@Injectable()\nexport class MeterGroupStyle extends BaseStyle {\n    name = 'metergroup';\n\n    theme = style;\n\n    classes = classes;\n}\n\n/**\n *\n * MeterGroup is a group of process status indicators.\n *\n * [Live Demo](https://www.primeng.org/metergroup)\n *\n * @module metergroupstyle\n *\n */\nexport enum MeterGroupClasses {\n    /**\n     * Class name of the root element\n     */\n    root = 'p-metergroup',\n    /**\n     * Class name of the meters element\n     */\n    meters = 'p-metergroup-meters',\n    /**\n     * Class name of the meter element\n     */\n    meter = 'p-metergroup-meter',\n    /**\n     * Class name of the label list element\n     */\n    labelList = 'p-metergroup-label-list',\n    /**\n     * Class name of the label element\n     */\n    label = 'p-metergroup-label',\n    /**\n     * Class name of the label icon element\n     */\n    labelIcon = 'p-metergroup-label-icon',\n    /**\n     * Class name of the label marker element\n     */\n    labelMarker = 'p-metergroup-label-marker',\n    /**\n     * Class name of the label text element\n     */\n    labelText = 'p-metergroup-label-text'\n}\n\nexport interface MeterGroupStyle extends BaseStyle {}\n","import { CommonModule } from '@angular/common';\nimport { AfterContentInit, ChangeDetectionStrategy, Component, ContentChild, ContentChildren, ElementRef, forwardRef, inject, Input, NgModule, QueryList, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { getOuterHeight } from '@primeuix/utils';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { MeterItem } from './metergroup.interface';\nimport { MeterGroupStyle } from './style/metergroupstyle';\n\n@Component({\n    selector: 'p-meterGroupLabel, p-metergrouplabel',\n    standalone: true,\n    imports: [CommonModule, SharedModule],\n    template: `\n        <ol [class]=\"cx('labelList')\">\n            <li *ngFor=\"let labelItem of value; let index = index; trackBy: parentInstance.trackByFn\" [class]=\"cx('label')\">\n                <ng-container *ngIf=\"!iconTemplate\">\n                    <i *ngIf=\"labelItem.icon\" [class]=\"labelItem.icon\" [ngClass]=\"cx('labelIcon')\" [ngStyle]=\"{ color: labelItem.color }\"></i>\n                    <span *ngIf=\"!labelItem.icon\" [class]=\"cx('labelMarker')\" [ngStyle]=\"{ backgroundColor: labelItem.color }\"></span>\n                </ng-container>\n                <ng-container *ngTemplateOutlet=\"iconTemplate; context: { $implicit: labelItem, icon: labelItem.icon }\"></ng-container>\n                <span [class]=\"cx('labelText')\">{{ labelItem.label }} ({{ parentInstance.percentValue(labelItem.value) }})</span>\n            </li>\n        </ol>\n    `\n})\nexport class MeterGroupLabel extends BaseComponent {\n    @Input() value: any[] = null;\n\n    @Input() labelPosition: 'start' | 'end' = 'end';\n\n    @Input() labelOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() min: number;\n\n    @Input() max: number;\n\n    @Input() iconTemplate: TemplateRef<any> | undefined;\n\n    parentInstance: MeterGroup = inject(forwardRef(() => MeterGroup));\n}\n/**\n * MeterGroup displays scalar measurements within a known range.\n * @group Components\n */\n@Component({\n    selector: 'p-meterGroup, p-metergroup, p-meter-group',\n    standalone: true,\n    imports: [CommonModule, MeterGroupLabel, SharedModule],\n    template: `\n        @if (labelPosition === 'start') {\n            <p-meterGroupLabel *ngIf=\"!labelTemplate && !_labelTemplate\" [value]=\"value\" [labelPosition]=\"labelPosition\" [labelOrientation]=\"labelOrientation\" [min]=\"min\" [max]=\"max\" [iconTemplate]=\"iconTemplate || _iconTemplate\" />\n            <ng-container *ngTemplateOutlet=\"labelTemplate || labelTemplate; context: { $implicit: value, totalPercent: totalPercent(), percentages: percentages() }\"></ng-container>\n        }\n        <ng-container *ngTemplateOutlet=\"startTemplate || _startTemplate; context: { $implicit: value, totalPercent: totalPercent(), percentages: percentages() }\"></ng-container>\n        <div [class]=\"cx('meters')\">\n            <ng-container *ngFor=\"let meterItem of value; let index = index; trackBy: trackByFn\">\n                <ng-container\n                    *ngTemplateOutlet=\"\n                        meterTemplate || _meterTemplate;\n                        context: {\n                            $implicit: meterItem,\n                            index: index,\n                            orientation: this.orientation,\n                            class: cx('meter'),\n                            size: percentValue(meterItem.value),\n                            totalPercent: totalPercent()\n                        }\n                    \"\n                >\n                </ng-container>\n                <ng-container *ngIf=\"!meterTemplate && !_meterTemplate && meterItem.value > 0\">\n                    <span [class]=\"cx('meter')\" [ngStyle]=\"meterStyle(meterItem)\"></span>\n                </ng-container>\n            </ng-container>\n        </div>\n        <ng-container *ngTemplateOutlet=\"endTemplate || _endTemplate; context: { $implicit: value, totalPercent: totalPercent(), percentages: percentages() }\"></ng-container>\n        @if (labelPosition === 'end') {\n            <p-meterGroupLabel *ngIf=\"!labelTemplate && !_labelTemplate\" [value]=\"value\" [labelPosition]=\"labelPosition\" [labelOrientation]=\"labelOrientation\" [min]=\"min\" [max]=\"max\" [iconTemplate]=\"iconTemplate || _iconTemplate\" />\n            <ng-container *ngTemplateOutlet=\"labelTemplate || _labelTemplate; context: { $implicit: value, totalPercent: totalPercent(), percentages: percentages() }\"></ng-container>\n        }\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [MeterGroupStyle],\n    host: {\n        '[attr.aria-valuemin]': 'min',\n        '[attr.role]': '\"meter\"',\n        '[attr.aria-valuemax]': 'max',\n        '[attr.aria-valuenow]': 'totalPercent()',\n        '[class]': \"cn(cx('root'), styleClass)\"\n    }\n})\nexport class MeterGroup extends BaseComponent implements AfterContentInit {\n    /**\n     * Current value of the metergroup.\n     * @group Props\n     */\n    @Input() value: MeterItem[] | undefined;\n    /**\n     * Mininum boundary value.\n     * @group Props\n     */\n    @Input() min: number = 0;\n    /**\n     * Maximum boundary value.\n     * @group Props\n     */\n    @Input() max: number = 100;\n    /**\n     * Specifies the layout of the component, valid values are 'horizontal' and 'vertical'.\n     * @group Props\n     */\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n    /**\n     * Specifies the label position of the component, valid values are 'start' and 'end'.\n     * @group Props\n     */\n    @Input() labelPosition: 'start' | 'end' = 'end';\n    /**\n     * Specifies the label orientation of the component, valid values are 'horizontal' and 'vertical'.\n     * @group Props\n     */\n    @Input() labelOrientation: 'horizontal' | 'vertical' | undefined = 'horizontal';\n    /**\n     * Style class of the element.\n     * @deprecated since v20.0.0, use `class` instead.\n     * @group Props\n     */\n    @Input() styleClass: string | undefined;\n\n    get vertical(): boolean {\n        return this.orientation === 'vertical';\n    }\n\n    @ContentChild('label', { descendants: false }) labelTemplate: TemplateRef<any> | undefined;\n\n    @ContentChild('meter', { descendants: false }) meterTemplate: TemplateRef<any> | undefined;\n\n    @ContentChild('end', { descendants: false }) endTemplate: TemplateRef<any> | undefined;\n\n    @ContentChild('start', { descendants: false }) startTemplate: TemplateRef<any> | undefined;\n\n    @ContentChild('icon', { descendants: false }) iconTemplate: TemplateRef<any> | undefined;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate> | undefined;\n\n    _labelTemplate: TemplateRef<any> | undefined;\n\n    _meterTemplate: TemplateRef<any> | undefined;\n\n    _endTemplate: TemplateRef<any> | undefined;\n\n    _startTemplate: TemplateRef<any> | undefined;\n\n    _iconTemplate: TemplateRef<any> | undefined;\n\n    _componentStyle = inject(MeterGroupStyle);\n\n    constructor() {\n        super();\n    }\n\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        const _container = this.el.nativeElement;\n        const height = getOuterHeight(_container);\n        this.vertical && (_container.style.height = height + 'px');\n    }\n\n    ngAfterContentInit() {\n        this.templates?.forEach((item) => {\n            switch (item.getType()) {\n                case 'label':\n                    this._labelTemplate = item.template;\n                    break;\n\n                case 'meter':\n                    this._meterTemplate = item.template;\n                    break;\n\n                case 'icon':\n                    this._iconTemplate = item.template;\n                    break;\n\n                case 'start':\n                    this._startTemplate = item.template;\n                    break;\n\n                case 'end':\n                    this._endTemplate = item.template;\n                    break;\n            }\n        });\n    }\n\n    percent(meter = 0) {\n        const percentOfItem = ((meter - this.min) / (this.max - this.min)) * 100;\n\n        return Math.round(Math.max(0, Math.min(100, percentOfItem)));\n    }\n\n    percentValue(meter) {\n        return this.percent(meter) + '%';\n    }\n\n    meterStyle(val) {\n        return {\n            backgroundColor: val.color,\n            width: this.orientation === 'horizontal' && this.percentValue(val.value),\n            height: this.orientation === 'vertical' && this.percentValue(val.value)\n        };\n    }\n\n    totalPercent() {\n        return this.percent(this.value.reduce((total, val) => total + val.value, 0));\n    }\n\n    percentages() {\n        let sum = 0;\n        const sumsArray = [];\n\n        this.value.forEach((item) => {\n            sum += item.value;\n            sumsArray.push(sum);\n        });\n\n        return sumsArray;\n    }\n\n    trackByFn(index: number): number {\n        return index;\n    }\n}\n\n@NgModule({\n    imports: [MeterGroup, SharedModule],\n    exports: [MeterGroup, SharedModule]\n})\nexport class MeterGroupModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}