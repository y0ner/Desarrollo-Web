import * as i1 from '@angular/common';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, inject, ContentChildren, ContentChild, Input, ViewEncapsulation, ChangeDetectionStrategy, Component, NgModule } from '@angular/core';
import { SharedModule, PrimeTemplate } from 'primeng/api';
import { BaseComponent } from 'primeng/basecomponent';
import { style } from '@primeuix/styles/imagecompare';
import { BaseStyle } from 'primeng/base';

const classes = {
    root: 'p-imagecompare',
    slider: 'p-imagecompare-slider'
};
class ImageCompareStyle extends BaseStyle {
    name = 'imagecompare';
    theme = style;
    classes = classes;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompareStyle, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompareStyle });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompareStyle, decorators: [{
            type: Injectable
        }] });
/**
 *
 * ImageCompare compares two images side by side with a slider.
 *
 * [Live Demo](https://www.primeng.org/imagecompare/)
 *
 * @module imagecomparestyle
 *
 */
var ImageCompareClasses;
(function (ImageCompareClasses) {
    /**
     * Class name of the root element
     */
    ImageCompareClasses["root"] = "p-imagecompare";
    /**
     * Class name of the slider element
     */
    ImageCompareClasses["slider"] = "p-imagecompare-slider";
})(ImageCompareClasses || (ImageCompareClasses = {}));

/**
 * Compare two images side by side with a slider.
 * @group Components
 */
class ImageCompare extends BaseComponent {
    /**
     * Index of the element in tabbing order.
     * @defaultValue 0
     * @group Props
     */
    tabindex;
    /**
     * Defines a string value that labels an interactive element.
     * @group Props
     */
    ariaLabelledby;
    /**
     * Identifier of the underlying input element.
     * @group Props
     */
    ariaLabel;
    /**
     * Template for the left side.
     * @group Templates
     */
    leftTemplate;
    /**
     * Template for the right side.
     * @group Templates
     */
    rightTemplate;
    _leftTemplate;
    _rightTemplate;
    templates;
    _componentStyle = inject(ImageCompareStyle);
    mutationObserver;
    isRTL = false;
    ngOnInit() {
        super.ngOnInit();
        this.updateDirection();
        this.observeDirectionChanges();
    }
    ngAfterContentInit() {
        this.templates?.forEach((item) => {
            switch (item.getType()) {
                case 'left':
                    this._leftTemplate = item.template;
                    break;
                case 'right':
                    this._rightTemplate = item.template;
                    break;
            }
        });
    }
    onSlide(event) {
        const value = event.target.value;
        const image = event.target.previousElementSibling;
        if (this.isRTL) {
            image.style.clipPath = `polygon(${100 - value}% 0, 100% 0, 100% 100%, ${100 - value}% 100%)`;
        }
        else {
            image.style.clipPath = `polygon(0 0, ${value}% 0, ${value}% 100%, 0 100%)`;
        }
    }
    updateDirection() {
        this.isRTL = !!this.el.nativeElement.closest('[dir="rtl"]');
    }
    observeDirectionChanges() {
        if (isPlatformBrowser(this.platformId)) {
            const targetNode = document?.documentElement;
            const config = { attributes: true, attributeFilter: ['dir'] };
            this.mutationObserver = new MutationObserver(() => {
                this.updateDirection();
            });
            this.mutationObserver.observe(targetNode, config);
        }
    }
    ngOnDestroy() {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
        super.ngOnDestroy();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompare, deps: null, target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.2.1", type: ImageCompare, isStandalone: true, selector: "p-imageCompare, p-imagecompare, p-image-compare", inputs: { tabindex: "tabindex", ariaLabelledby: "ariaLabelledby", ariaLabel: "ariaLabel" }, host: { properties: { "class": "cx('root')", "attr.tabindex": "tabindex", "attr.aria-labelledby": "ariaLabelledby", "attr.aria-label": "ariaLabel" } }, providers: [ImageCompareStyle], queries: [{ propertyName: "leftTemplate", first: true, predicate: ["left"] }, { propertyName: "rightTemplate", first: true, predicate: ["right"] }, { propertyName: "templates", predicate: PrimeTemplate }], usesInheritance: true, ngImport: i0, template: `
        <ng-template *ngTemplateOutlet="leftTemplate || _leftTemplate"></ng-template>
        <ng-template *ngTemplateOutlet="rightTemplate || _rightTemplate"></ng-template>

        <input type="range" min="0" max="100" value="50" (input)="onSlide($event)" [class]="cx('slider')" />
    `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: SharedModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompare, decorators: [{
            type: Component,
            args: [{
                    selector: 'p-imageCompare, p-imagecompare, p-image-compare',
                    standalone: true,
                    imports: [CommonModule, SharedModule],
                    template: `
        <ng-template *ngTemplateOutlet="leftTemplate || _leftTemplate"></ng-template>
        <ng-template *ngTemplateOutlet="rightTemplate || _rightTemplate"></ng-template>

        <input type="range" min="0" max="100" value="50" (input)="onSlide($event)" [class]="cx('slider')" />
    `,
                    host: {
                        '[class]': "cx('root')",
                        '[attr.tabindex]': 'tabindex',
                        '[attr.aria-labelledby]': 'ariaLabelledby',
                        '[attr.aria-label]': 'ariaLabel'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [ImageCompareStyle]
                }]
        }], propDecorators: { tabindex: [{
                type: Input
            }], ariaLabelledby: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], leftTemplate: [{
                type: ContentChild,
                args: ['left', { descendants: false }]
            }], rightTemplate: [{
                type: ContentChild,
                args: ['right', { descendants: false }]
            }], templates: [{
                type: ContentChildren,
                args: [PrimeTemplate]
            }] } });
class ImageCompareModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompareModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "20.2.1", ngImport: i0, type: ImageCompareModule, imports: [ImageCompare, SharedModule], exports: [ImageCompare, SharedModule] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompareModule, imports: [ImageCompare, SharedModule, SharedModule] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.2.1", ngImport: i0, type: ImageCompareModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ImageCompare, SharedModule],
                    exports: [ImageCompare, SharedModule]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ImageCompare, ImageCompareClasses, ImageCompareModule, ImageCompareStyle };
//# sourceMappingURL=primeng-imagecompare.mjs.map
